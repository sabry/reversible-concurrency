ord : type.

lt : ord.
gt : ord.
eq : ord.

compare : nat -> nat -> ord -> type.
compare/eq : compare z z eq.
compare/gt : compare N z gt.
compare/lt : compare z N lt.
compare/rec : 
  compare N1 N2 O -> 
  compare (s N1) (s N2) O.

%mode compare +N1 +N2 -O.
%worlds () (compare _ _ _).
%total [N1 N2] (compare N1 N2 _).

state : type.

consist : state. %% s = c = r
send-req : state. %% s > c = r
recv-int : state. %% c < s, r > s
recv-ack : state. %% s = r < c
send-recv-back : state. %% s > c < r
recv-back : state. %% s = c > r
send-back : state. %% s < c = r
back-s : state. %% r < c, s < c, s < r
back-r : state. %% r < c, s < c, r < s
back : state. %% r < c, s = r
 
id-state : state -> state -> type.
id-state/refl : id-state ST ST.

st-comp : 
  (D1: compare S C O1) -> 
  (D2: compare C R O2) -> 
  (D3: compare S R O3) -> state -> type.

% S = C, C = R, S = R
st-comp/consist : 
  st-comp (D1: compare S C eq)
          (D2: compare C R eq)
          (D3: compare S R eq) consist.

st-comp/send-req : 
  st-comp (D1: compare S C gt)
          (D2: compare C R eq)
          (D3: compare S R gt) send-req.


st-comp/recv-int : 
  st-comp (D1: compare S C gt)
          (D2: compare C R lt)
          (D3: compare S R lt) recv-int.

st-comp/???? : 
  st-comp (D1: compare S C ?)
          (D2: compare C R ??)
          (D3: compare S R ???) ????.


st-comp/???? : 
  st-comp (D1: compare S C ?)
          (D2: compare C R ??)
          (D3: compare S R ???) ????.

st-comp/???? : 
  st-comp (D1: compare S C ?)
          (D2: compare C R ??)
          (D3: compare S R ???) ????.


st-comp/???? : 
  st-comp (D1: compare S C ?)
          (D2: compare C R ??)
          (D3: compare S R ???) ????.


% S > C, C < R, S < R
st-comp/recv-int :
  st-comp gt lt lt recv-int.

% S < C, C > R, S = R
st-comp/recv-ack : 
  st-comp lt gt eq recv-ack.

% S > C, C < R, 
st-comp/send-recv-back :
  st-comp gt lt OR D send-recv-back.

% S < C, C = R, S < R
st-comp/send-back :
  st-comp lt eq lt send-back.

% S = C, C > R, S > R 
st-comp/recv-back :
  st-comp eq gt gt recv-back.

% S < C, C > R, S < R
st-comp/back-s :
  st-comp lt gt lt back-s.

% S < C, C > R, S > R
st-comp/back-r :
  st-comp lt gt gt back-r.

% S < C, C > R, S = R
st-comp/back : 
  st-comp lt gt eq back.

%mode st-comp +O1 +O2 +O3 -ST.
%worlds () (st-comp _ _ _ _).
%total {} (st-comp _ _ _ _).

pred : nat -> nat -> nat -> state -> type.

pred/: %% S == C == R
  pred N1 N2 N3 ST <-
  state-pred (compare N1 N2 O1) 
             (compare N2 N3 O2)
             (compare N1 N3 O3) ST

pred/send-req : %% C == R, C < S
  pred S N N send-req <-
  compare S N gt.

pred/recv-int : %% C < S, S < R
  pred S C R recv-int <-
  compare C S lt <-
  compare S R lt.

pred/recv-ack : %% C < S, S = R
  pred S N N recv-ack <-
  compare N S lt.
  
pred/send-recv-back : %% R < C, C < S
  pred S C R send-recv-back <-
  compare R C lt <-
  compare C S lt.
  
pred/recv-back : %% R < C, C = S
  pred N N R recv-back <-
  compare R N lt.

pred/send-back : %% S < C, C = R
  pred S N N send-back <-
  compare S N lt.

pred/back-s : %% R < C, S < C, S < R
  pred S C R back-s <-
  compare R C lt <-
  compare S C lt <-
  compare S R lt.

pred/back-r : %% R < C, S < C, R < S
  pred S C R back-r <-
  compare R C lt <-
  compare S C lt <-
  compare R S lt.

pred/back :  %% R < C, S = R
  pred N C N back <-
  compare N C lt.

%mode pred +S +C +R -ST.
%worlds () (pred _ _ _ _).
%total {} (pred _ _ _ _). % Total check proves there is no missed case
 
% pred-unique : pred S N C ST -> pred S N C ST' -> id-state ST ST' -> type.
% 
% %mode pred-unique +D1 +D2 -ST.
% 
% - : pred-unique pred/consist pred/consist id-state/refl.
% 
% - : pred-unique (pred/send-req (nat-lt C S)) (pred/send-req (nat-lt C S)) id-state/refl.
% 
% - : pred-unique (pred/recv-int (nat-lt S R) (nat-lt C S)) (pred/recv-int (nat-lt S R) (nat-lt C S)) id-state/refl.
% 
% - : pred-unique (pred/recv-ack (nat-lt C S)) (pred/recv-ack (nat-lt C S)) id-state/refl.
% 
% - : pred-unique (pred/send-recv-back (nat-lt C R) (nat-lt C S)) (pred/send-recv-back (nat-lt C R) (nat-lt C S)) id-state/refl.
% 
% - : pred-unique (pred/recv-back (nat-lt R N)) (pred/recv-back (nat-lt R N)) id-state/refl.
% 
% - : pred-unique (pred/send-back (nat-lt S N)) (pred/send-back (nat-lt S N)) id-state/refl.
% 
% - : pred-unique (pred/back-s (nat-lt S R) (nat-lt S C) (nat-lt R C)) (pred/back-s (nat-lt S R) (nat-lt S C) (nat-lt R C)) id-state/refl.
% 
% - : pred-unique (pred/back-r (nat-lt R S) (nat-lt S C) (nat-lt R C)) (pred/back-r (nat-lt R S) (nat-lt S C) (nat-lt R C)) id-state/refl.
% 
% - : pred-unique (pred/back (nat-lt N C)) (pred/back (nat-lt N C)) id-state/refl.
% 
% %worlds () (pred-unique _ _ _).
% %total {} (pred-unique _ _ _).
