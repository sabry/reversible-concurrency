*** Running programs and testing ***

  The makefile contains some instructions for running tests rather
  easily, and contains instructions on what each command does.

  If you don't want to use the makefile, you can run ghci Reversible.Test
  to get the test suite in a REPL. 

  If you just want to load the library, ghci Reversible should do it.

*** A little about debugging ***

  The debugging trace print out the following information:

  Module.function <description msg>. 

  There are currently 2 levels of debug traces included, but more are
  supported. Look over Debug.hs for the interface of the trace function.

  To enable tracing, simply add -DDEBUG and -Ddebug_level=<level>, where
  level is an integer between 0 (no debugging) and however high a debug
  level you want (currently, 2 is the highest).

*** Module overview ***

  Reversible: Simple imports Reversible.Base

  Reversible.Base: Contains the reversible concurrency API, and assorted
    helpers. Most of the work happens here.

  Reversible.Channel: A zero buffer channel abstraction, which keeps track
    of logical times on the channel, and supports saving/restoring channel
    states.

  Reversible.Concurrent: A bunch of helpers to spawn parallel threads.
    While haskell has 'par', it doesn't FORCE the spawning of threads,
    which we want.

  Reversible.LogicalTime: A quick abstraction for logical time.

  Reversible.Test: The test quite. Exports severl 'marks'. markSub0 tests
    basic concurreny/communication functionality. mark0 tests the ability
    to backtrack independently (without communication). mark1 test the
    ability to backtrack and communicate, possibly causing neighbors to
    backtrack.

  Reversible.Test.Mark1: A script for running mark1 tests through the
    makefile. The test suite needs a little more abstraction to make it
    easier to run through the makefile, and to make it a bit more
    organized.
