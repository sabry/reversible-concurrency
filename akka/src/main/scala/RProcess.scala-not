
package reversibleconcurrency

import akka.actor.{ ActorRef, Actor, ActorSystem, Props }
import scala.collection.mutable.HashSet
import scala.util.continuations._

trait TimeDirection
case object TForward extends TimeDirection
case object TBackward extends TimeDirection

trait MessageDirection[T] {
  def register(chan: Channel, ref: ActorRef)
}
trait Sender extends MessageDirection
trait Receiver extends MessageDirection

object RImpls {
  implicit object SenderImpl extends MessageDirection[Sender] {
    def register(chan: Channel, ref: ActorRef) {
      chan.sender = Some(ref)
    }
  }
  implicit object ReceiverImpl extends MessageDirection[Receiver] {
    def register(chan: Channel, ref: ActorRef) {
      chan.receiver = Some(ref)
    }
  }
}

class Channel[T] {
  var sender: Option[ActorRef] = None
  var receiver: Option[ActorRef] = None
}

case class ChannelView[Role : MessageDirection, T](raw: Channel[T], state: ProcessState) {
  // Role is an instance of the MessageDirection typeclass
  // (yes this is an absurd overcomplication but I did it)
  implicitly[MessageDirection[Role]].register(raw, state.self)
  var time = 0
  var timeDirection: TimeDirection = TForward
}

case class Message[T](raw: T, time: Int, chanId: Int)

class ChannelMap {
  var raw = new HashSet[ChannelView[_]]
}

case class Frame[Input,Output](time: Int, channelMap: ChannelMap, context: Context[Input,Output], value: Input) 

case class Context[Input,Output](k: Input=>Output)

object PactorSystem {
  
  val system = ActorSystem()

  import ProcessFunctions._
  import RImpls._

  val reallyFun = Task { implicit state: ProcessState =>
    println("a")
    suspend
    println("b")
  }         

  def work = {
    system.actorOf(Props(new Pactor(5, reallyFun)))
    Thread.sleep(1000)
    system.shutdown()
  }

  // OK serious example time
  
  // A channel for communication
  val chan = new Channel

  // Our sending process
  val sendTask = Task { implicit state: ProcessState =>
    // pre-abstraction: manually build a ChannelView for the channel
    val myChan = ChannelView[Sender](chan, state)
    println("about to send a message")
    send(myChan) { "the message" }
    println("sent a message")
  }

  val receiveTask = Task { implicit state: ProcessState =>
    val myChan = ChannelView[Receiver](chan, state)
    println("about to receive a message")
    println("received: " + receive(myChan))
  }
    
}

class Printer extends Actor {
  def receive = {
    case m => println(m)
  }
}

class Pactor(id: Int, task: Task) extends Actor {

  import ProcessFunctions._

  def receive = {
    case m @ Message(raw, time, chanId) => 
      state.messageBuffer += (chanId -> m)
      // if we get the message we are waiting for
      if(state.receiveId == chanId) {
        state.receiveCont.apply()
      }
    case m => println("id: " + id + " " + m)
  }

  implicit val state = new ProcessState(id, context.self)

  reset {
    task.run
  }

  resume

}

// build a mutable box that holds all the state for a process

class ProcessState(id: Int, self: ActorRef) {

  // continuation representing the top of the stable block
  // -- depth 1 cap for now
  var cont: Option[Unit=>Unit] = None

  // when we receive we block until our message is found
  var receiveCont: Option[Any=>Any] = None
  var receiveId: Int = -1

  val messageBuffer = new HashMap[Int, Option[Message[_]]]

  def registerReceive[T](chan: ChannelView[Receiver, T], k: (T=>Unit)) {
    receiveCont = Some(k)
  }

}

// The functions used by one of our reversible functions. Dynamic
// scope is gained by having each take a ProcessState implicitly. 
object ProcessFunctions {

  def suspend()(implicit state: ProcessState): Unit @ cpsParam[Unit,Unit] = {
    shift { k: (Unit=>Unit) =>
      state.cont = Some(k)
    }
  }

  def resume()(implicit state: ProcessState) {
    state.cont.get.apply()
  }

  def send(chan: ChannelView[Sender, T])(msg: T)(implicit state: ProcessState) {
    chan.raw.receiver.get ! msg
  }

  def receive(chan: ChannelView[Receiver, T])(implicit state: ProcessState) {
    // For this to work we need to register an event in the actor
    // running this task via the state object. The continuation saved
    // with this event will need to have an input type and an output type!

    shift { k: (T=>Unit) =>
      state.registerReceive(chan, k)
         }
  }          
}

// WHAT IS THIS EVEN SUPPOSED TO DO!? AND HOW?!
class Task(work: OurTypes.Attempt) {
  def run(implicit state: ProcessState): Unit @cpsParam[Unit,Unit] = 
    work.apply(state)
}

object Task {
  def apply(work: OurTypes.Attempt): Task =
    new Task(work)
}

object OurTypes {

  type Attempt = ProcessState => Unit @cpsParam[Unit,Unit]

  // Not really using these right now?

  // For passing functions in to the task as arguments to work the
  // type signatures are going to be awful. This object/module
  // contains type aliases to make this a reasonable process.

  // To start we don't allow return values. Those are complicated...
  type Task = Unit

  // Suspend just suspends, nothing exciting
  type Suspend = Unit=>Unit 

  // Resume just resumes, nothing exciting
  type Resume = Unit=>Unit

  // Send expects a message, returns nothing
  type Send = Message => Unit

  // Receive expects nothing, returns a message
  type Receive = Unit => Message

}
 
// Syntax games

trait Registerable[T] {
  def go: Unit
}

object Impls {
  implicit object FooOneImpl extends Registerable[FooOne] { def go = println("one") }
  implicit object FooTwoImpl extends Registerable[FooTwo] { def go = println("two") }
}

case class Games[In : Registerable](n: Int) {
  def work = implicitly[Registerable[In]].go
}






